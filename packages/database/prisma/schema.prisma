// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "api_platform", "app_platform"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Subscription   Subscription[]
  full_name     String?
  password      String?
  role          Role      @default(USER)
  created_at    DateTime  @default(now())

  @@map("users")
  @@schema("public")
}

enum Role {
  USER
  ADMIN

  @@schema("public")
}

model ApiAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user ApiUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("api_platform")
}

model ApiSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         ApiUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("api_platform")
}

model ApiUser {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      ApiAccount[]
  sessions      ApiSession[]
  // Subscription   Subscription[]
  full_name     String?
  password      String?
  role          ApiUserRole  @default(USER)
  created_at    DateTime     @default(now())

  @@schema("api_platform")
}

model AppAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("app_platform")
}

model AppSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app_platform")
}

model AppUser {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      AppAccount[]
  sessions      AppSession[]
  // Subscription   Subscription[]
  full_name     String?
  password      String?
  role          AppUserRole  @default(USER)
  created_at    DateTime     @default(now())

  @@schema("app_platform")
}

enum AppUserRole {
  USER
  ADMIN

  @@schema("app_platform")
}

enum ApiUserRole {
  USER
  ADMIN

  @@schema("api_platform")
}
